project:
  introduction: ""
spec:
  api: |
    rest_api {
      uri_construction {
      pattern("/api\\/[a-zA-Z0-9]+\\/v[0-9]+\\/[a-zA-Z0-9\\/\\-]+")
      example("/api/petstore/v1/pets/dogs")
    }
    
      http_action("GET", "POST", "PUT", "DELETE")
      status_code(200, 201, 202, 204, 400, 401, 403, 404, 500, 502, 503, 504)
    
      security(
      """
      Token Based Authentication (Recommended) Ideally, microservices should be stateless so the service instances can be scaled out easily and the client requests can be routed to multiple independent service providers. A token based authentication mechanism should be used instead of session based authentication
      """.trimIndent()
      )
    
      misc("""""")
    }
  layered: |
    layered {
      layer("application") {
          pattern(".*\\.application") { name shouldBe endsWith("DTO", "Request", "Response") }
      }
      layer("domain") {
          pattern(".*\\.domain") { name shouldBe endsWith("Entity") }
      }
      layer("infrastructure") {
          pattern(".*\\.infrastructure") { name shouldBe endsWith("Repository", "Mapper") }
      }
      layer("interface") {
          pattern(".*\\.interface") { name shouldBe endsWith("Controller", "Service") }
      }

      dependency {
          "application" dependedOn "domain"
          "application" dependedOn "interface"
          "domain" dependedOn "infrastructure"
          "interface" dependedOn "domain"
      }
    }
  naming: |
    project_name {
        pattern("^([a-z0-9-]+)-([a-z0-9-]+)-([a-z0-9-]+)(-common)?\$")
        example("system1-servicecenter1-microservice1")
    }
    
    
    class_level {
        style("CamelCase")
        pattern(".*") { name shouldNotBe contains("$") }
    }
    function_level {
        style("CamelCase")
        pattern(".*") { name shouldNotBe contains("$") }
    }
