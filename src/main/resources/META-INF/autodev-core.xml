<idea-plugin allow-bundled-update="true">
    <resource-bundle>messages.AutoDevBundle</resource-bundle>

    <depends>com.intellij.modules.platform</depends>
    <depends>Git4Idea</depends>

    <extensions defaultExtensionNs="com.intellij">
        <notificationGroup id="AutoDev.notification.group" displayType="STICKY_BALLOON" bundle="messages.AutoDevBundle"
                           key="notification.group.name"/>

        <applicationConfigurable parentId="tools" instance="cc.unitmesh.devti.settings.AutoDevSettingsConfigurable"
                                 id="cc.unitmesh.devti.settings.AutoDevSettingsConfigurable"
                                 displayName="AutoDev"/>

        <applicationService
                serviceInterface="cc.unitmesh.devti.editor.inlay.LLMInlayManager"
                serviceImplementation="cc.unitmesh.devti.editor.inlay.LLMInlayManagerImpl"/>

        <applicationService serviceImplementation="cc.unitmesh.devti.settings.AutoDevSettingsState"/>

        <runConfigurationProducer
                implementation="cc.unitmesh.devti.runconfig.command.AutoDevFeatureConfigurationProducer"/>
        <runConfigurationProducer
                implementation="cc.unitmesh.devti.runconfig.command.CompositeAutoBaseRunConfigurationProducer"/>

        <configurationType implementation="cc.unitmesh.devti.runconfig.AutoDevConfigurationType"/>

        <!-- Run Configurations -->
        <programRunner implementation="cc.unitmesh.devti.runconfig.AutoDevCommandRunner"/>

        <toolWindow id="AutoDev" secondary="true" anchor="right"
                    icon="cc.unitmesh.devti.AutoDevIcons.AI_COPILOT"
                    factoryClass="cc.unitmesh.devti.gui.AutoDevToolWindowFactory"/>

        <notificationGroup id="AI notification group" displayType="STICKY_BALLOON" bundle="messages.AutoDevBundle"
                           key="notification.group.name"/>

        <!--        <editorFactoryListener implementation="cc.unitmesh.devti.editor.inlay.AutoDevEditorListener"/>-->
        <!--        <typedHandler order="first, before completionAutoPopup"-->
        <!--                      implementation="cc.unitmesh.devti.editor.inlay.TypeOverHandler"/>-->

        <intentionAction>
            <className>cc.unitmesh.devti.intentions.AutoDevIntentionHelper</className>
            <categoryKey>intention.category.llm</categoryKey>
        </intentionAction>


        <highlightErrorFilter implementation="cc.unitmesh.devti.gui.error.CodeBlockHighlightErrorFilter"/>
        <daemon.highlightInfoFilter implementation="cc.unitmesh.devti.gui.error.CodeBlockHighlightingFilter"/>
        <defaultHighlightingSettingProvider
                implementation="cc.unitmesh.devti.gui.error.CodeBlockHighlightingSettingsProvider"/>
        <daemon.intentionActionFilter implementation="cc.unitmesh.devti.gui.error.CodeBlockIntentionActionFilter"/>

    </extensions>

    <extensionPoints>
        <extensionPoint qualifiedName="cc.unitmesh.autoDevIntention"
                        beanClass="com.intellij.codeInsight.intention.IntentionActionBean"
                        dynamic="true">
            <with tag="className" implements="com.intellij.codeInsight.intention.IntentionAction"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.fileContextBuilder"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass"
                  implements="cc.unitmesh.devti.context.builder.FileContextBuilder"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.classContextBuilder"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass"
                  implements="cc.unitmesh.devti.context.builder.ClassContextBuilder"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.methodContextBuilder"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass"
                  implements="cc.unitmesh.devti.context.builder.MethodContextBuilder"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.codeModifier"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass"
                  implements="cc.unitmesh.devti.context.builder.CodeModifier"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.variableContextBuilder"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass"
                  implements="cc.unitmesh.devti.context.builder.VariableContextBuilder"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.livingDocumentation"
                        beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="cc.unitmesh.devti.provider.LivingDocumentation"/>
        </extensionPoint>

        <extensionPoint qualifiedName="cc.unitmesh.devFlowProvider"
                        interface="cc.unitmesh.devti.provider.DevFlowProvider"
                        dynamic="true"/>

        <!-- TODO: find better way to share context -->
        <extensionPoint qualifiedName="cc.unitmesh.contextPrompter"
                        interface="cc.unitmesh.devti.provider.ContextPrompter"
                        dynamic="true"/>

        <extensionPoint qualifiedName="cc.unitmesh.promptStrategy"
                        interface="cc.unitmesh.devti.provider.PromptStrategy"
                        dynamic="true"/>

        <extensionPoint qualifiedName="cc.unitmesh.testContextProvider"
                        interface="cc.unitmesh.devti.provider.WriteTestService"
                        dynamic="true"/>

        <extensionPoint qualifiedName="cc.unitmesh.chatContextProvider"
                        interface="cc.unitmesh.devti.provider.context.ChatContextProvider"
                        dynamic="true"/>
    </extensionPoints>

    <!--    <projectListeners>-->
    <!--        <listener topic="com.intellij.openapi.command.CommandListener"-->
    <!--                  class="cc.unitmesh.devti.editor.inlay.LLMCommandListener"/>-->
    <!--    </projectListeners>-->

    <extensions defaultExtensionNs="cc.unitmesh">
        <autoDevIntention>
            <className>cc.unitmesh.devti.intentions.action.NewChatWithCodeIntention</className>
            <bundleName>messages.AutoDevBundle</bundleName>
            <categoryKey>intention.category.llm</categoryKey>
        </autoDevIntention>
        <autoDevIntention>
            <className>cc.unitmesh.devti.intentions.action.CodeCompletionIntention</className>
            <bundleName>messages.AutoDevBundle</bundleName>
            <categoryKey>intention.category.llm</categoryKey>
        </autoDevIntention>
        <autoDevIntention>
            <className>cc.unitmesh.devti.intentions.action.CodeCompletionInlayIntention</className>
            <bundleName>messages.AutoDevBundle</bundleName>
            <categoryKey>intention.category.llm</categoryKey>
        </autoDevIntention>
        <autoDevIntention>
            <className>cc.unitmesh.devti.intentions.action.AutoTestThisIntention</className>
            <bundleName>messages.AutoDevBundle</bundleName>
            <categoryKey>intention.category.llm</categoryKey>
        </autoDevIntention>
        <autoDevIntention>
            <className>cc.unitmesh.devti.intentions.action.LivingDocumentationIntention</className>
            <bundleName>messages.AutoDevBundle</bundleName>
            <categoryKey>intention.category.llm</categoryKey>
        </autoDevIntention>

        <chatContextProvider implementation="cc.unitmesh.devti.provider.builtin.LanguageContextProvider"/>
    </extensions>

    <actions>
        <action id="llm.applyInlays"
                class="cc.unitmesh.devti.actions.LLMApplyInlaysAction">
            <keyboard-shortcut first-keystroke="TAB" keymap="$default"/>
            <override-text place="MainMenu" text="Apply Completions to Editor"/>
            <override-text place="EditorPopup" text="Accept"/>
        </action>

        <group id="AutoDevIntentionsActionGroup" class="cc.unitmesh.devti.intentions.IntentionsActionGroup"
               icon="cc.unitmesh.devti.AutoDevIcons.AI_COPILOT" searchable="false">
            <add-to-group group-id="ShowIntentionsGroup" relative-to-action="ShowIntentionActions" anchor="after"/>
        </group>

        <group id="org.intellij.sdk.action.GroupedActions" popup="true" text="AutoDev Chat" description="AutoDev chat">
            <action id="cc.unitmesh.devti.actions.chat.ChatBotExplainAction"
                    class="cc.unitmesh.devti.actions.chat.ChatBotExplainAction" text="Explain This"
                    description="Ask AI about this code">
            </action>

            <action id="cc.unitmesh.devti.actions.chat.ChatBotRefactorAction"
                    class="cc.unitmesh.devti.actions.chat.ChatBotRefactorAction" text="Refactor This"
                    description="Ask AI refactor this code">
            </action>

            <action id="cc.unitmesh.devti.actions.chat.ChatWithThisAction"
                    class="cc.unitmesh.devti.actions.chat.ChatWithThisAction" text="Chat with This"
                    description="Ask AI chat with this code">
            </action>

            <action id="cc.unitmesh.devti.actions.chat.GenerateTestAction"
                    class="cc.unitmesh.devti.actions.chat.GenerateTestAction" text="Write Test for This"
                    description="Ask AI write this code">
            </action>

            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
        </group>

        <action id="cc.unitmesh.devti.actions.chat.FixThisAction"
                class="cc.unitmesh.devti.actions.chat.FixThisAction" text="Fix This (AutoDev)"
                description="Ask AI fi this code">
            <add-to-group group-id="ConsoleEditorPopupMenu" anchor="first"/>
        </action>

        <action id="autodev.Vcs.CommitMessage"
                class="cc.unitmesh.devti.vcs.CommitMessageSuggestionAction" text="Commit Message (AutoDev)"
                icon="cc.unitmesh.devti.AutoDevIcons.AI_COPILOT"
                description="Ask AI generate commit message">

            <add-to-group group-id="Vcs.MessageActionGroup"/>
        </action>

        <action id="autodev.Vcs.LLMChangelog"
                class="cc.unitmesh.devti.vcs.ReleaseNoteSuggestionAction" text="Generate Release Note (AutoDev)"
                icon="cc.unitmesh.devti.AutoDevIcons.AI_COPILOT"
                description="Ask AI generate release note">

            <add-to-group group-id="Vcs.Log.ContextMenu" relative-to-action="Vcs.ShowDiffWithLocal" anchor="after"/>
        </action>

        <action id="cc.unitmesh.devti.actions.chat.CodeCompleteChatAction"
                class="cc.unitmesh.devti.actions.chat.CodeCompleteChatAction" text="Code Complete (AutoDev)"
                description="Ask AI about this code">

            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
        </action>

        <group id="AutoDev.ToolWindow.Snippet.Toolbar">
            <action id="AutoDev.ToolWindow.Snippet.LanguageLabelAction"
                    class="cc.unitmesh.devti.gui.snippet.AutoDevLanguageLabelAction"/>

            <action id="AutoDev.ToolWindow.Snippet.CopyToClipboard"
                    icon="AllIcons.Actions.Copy"
                    class="cc.unitmesh.devti.gui.snippet.AutoDevCopyToClipboardAction"/>
        </group>

        <group id="AutoDev.ToolWindow.Chat.TitleActions">
            <action id="AutoDev.ToolWindow.NewChatAction" class="cc.unitmesh.devti.gui.toolbar.NewChatAction"/>
        </group>

        <group id="AutoDev.ToolWindow.Message.Toolbar.Assistant">
            <action id="AutoDev.ToolWindow.Message.Like"
                    class="cc.unitmesh.devti.gui.chat.message.AutoDevRateMessageAction$Like"/>
        </group>

    </actions>
</idea-plugin>
